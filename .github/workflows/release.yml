# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: SatisfactoryPlanner
  REGISTRY: ghcr.io

  AZURE_FUNCTIONAPP_NAME: satisfactory-planner-db-migrator
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'src/Database/DatabaseMigrator.Functions'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '8.0.x'

permissions:
  contents: read
  packages: write

jobs:
  build-api:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log in to GitHub container registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO }}.api:${{ github.sha }}
          context: ${{ github.workspace }}/src
          file: ./src/API/SatisfactoryPlanner.API/Dockerfile

  deploy-api:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build-api
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: '${{ env.REGISTRY }}/${{ env.REPO }}.api:${{ github.sha }}'

#  build-and-deploy-db-migrator:
#    runs-on: windows-latest
#    environment: dev
#    steps:
#    - name: 'Checkout GitHub Action'
#      uses: actions/checkout@v4

#    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
#      uses: actions/setup-dotnet@v3
#      with:
#        dotnet-version: ${{ env.DOTNET_VERSION }}

#    - name: 'Resolve Project Dependencies Using Dotnet'
#      shell: pwsh
#      run: |
#        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
#        dotnet build --configuration Release --output ./output
#        popd

#    - name: 'Run Azure Functions Action'
#      uses: Azure/functions-action@v1
#      id: fa
#      with:
#        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
#        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
#        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}


